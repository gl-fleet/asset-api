// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using asset_allocation_api.Context;

#nullable disable

namespace asset_allocation_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250417064821_ChangeToTimestampWithoutTimeZone")]
    partial class ChangeToTimestampWithoutTimeZone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntry", b =>
                {
                    b.Property<int>("AuditEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditEntryID"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(6);

                    b.Property<string>("EntitySetName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnOrder(1);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnOrder(2);

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnOrder(3);

                    b.Property<string>("StateName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnOrder(4);

                    b.HasKey("AuditEntryID");

                    b.ToTable("AuditEntries");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.Property<int>("AuditEntryPropertyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditEntryPropertyID"));

                    b.Property<int>("AuditEntryID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<string>("NewValueFormatted")
                        .HasColumnType("text")
                        .HasColumnName("NewValue")
                        .HasColumnOrder(5);

                    b.Property<string>("OldValueFormatted")
                        .HasColumnType("text")
                        .HasColumnName("OldValue")
                        .HasColumnOrder(4);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnOrder(3);

                    b.Property<string>("RelationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnOrder(2);

                    b.HasKey("AuditEntryPropertyID");

                    b.HasIndex("AuditEntryID");

                    b.ToTable("AuditEntryProperties");
                });

            modelBuilder.Entity("asset_allocation_api.Context.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<int?>("LastAllocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("LastMaintenanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Mac2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Mac3")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("ManufacturedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Rfid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Serial")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly?>("StartedUsingDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Asset__3214EC0736A337F2");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("LastAllocationId");

                    b.HasIndex("LastMaintenanceId");

                    b.HasIndex("Rfid")
                        .IsUnique()
                        .HasDatabaseName("UQ_Asset_Rfid");

                    b.HasIndex("Serial")
                        .IsUnique()
                        .HasDatabaseName("UQ_Asset_Serial");

                    b.HasIndex(new[] { "Rfid" }, "NonClusteredIndex-20240927-092258");

                    b.HasIndex(new[] { "DepartmentId" }, "assetIndx");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelNo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ReturnedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__AssetAll__3214EC07E69F292A");

                    b.HasIndex("AssetId");

                    b.HasIndex(new[] { "PersonnelNo", "ReturnedDate" }, "NonClusteredIndex-20241003-093424");

                    b.ToTable("AssetAllocation", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__AssetAtt__3214EC0710F2A989");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetAttachments");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetCheckTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CheckedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("CheckedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__AssetChe__3214EC07AD5F7CCD");

                    b.HasIndex("AssetCheckTypeId");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetCheckHistory", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CheckName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__AssetChe__3214EC072F31D91B");

                    b.ToTable("AssetCheckType", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckTypeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CheckNear")
                        .HasColumnType("text");

                    b.Property<int?>("CheckPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("CheckTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Enabled")
                        .HasColumnType("integer");

                    b.Property<string>("ExpireNear")
                        .HasColumnType("text");

                    b.Property<int?>("Expirelimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("CheckTypeId");

                    b.ToTable("AssetCheckTypeSetting", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetInspectionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<int?>("CheckStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("CheckTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CheckedDateTime")
                        .HasColumnType("timestamp");

                    b.Property<int?>("CheckedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("CreatedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("CheckTypeId");

                    b.ToTable("AssetInspectionHistory", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ReturnHour")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__AssetTyp__3214EC07219BEE67");

                    b.ToTable("AssetType", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.Configuration", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ConfigId"));

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConfigDesc")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConfigValue")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("IsEnabled")
                        .HasColumnType("integer")
                        .HasColumnName("isEnabled");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("ConfigId")
                        .HasName("PK__Configur__C3BC335CA70BD68D");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Configuration", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK__Departme__3214EC07A93BB1DC");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.DepartmentAssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__Departme__3214EC07B0548A20");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentAssetType", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.DepartmentPersonnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelNo")
                        .HasColumnType("integer");

                    b.Property<string>("UserGroup")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PK__Departme__3214EC0707139CD3");

                    b.ToTable("DepartmentPersonnel");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("AssignedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("PermitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermitId");

                    b.ToTable("NonReturnableAssetAllocation", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("FieldName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("ValueType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("NonReturnableAssetField", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetPersonnelPermit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<short?>("Enabled")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelNo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.ToTable("NonReturnableAssetPersonnelPermit", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetPersonnelSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("FieldId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelNo")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FieldId", "PersonnelId" }, "NonClusteredIndex-20240927-090804");

                    b.ToTable("NonReturnableAssetPersonnelSetting", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CooldownDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<string>("IconName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Limit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("ModifiedUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("NonReturnableAssetType", (string)null);
                });

            modelBuilder.Entity("asset_allocation_api.Context.Personnel", b =>
                {
                    b.Property<int>("PersonnelNo")
                        .HasColumnType("integer");

                    b.Property<string>("CardNum")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CompanyDesc")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("DepartmentDesc")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EmploymentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("FullName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<int?>("HotstampNo")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("PersonnelId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonnelSer")
                        .HasColumnType("integer");

                    b.Property<string>("PositionDesc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("PersonnelNo")
                        .HasName("PK__Personne__CAFBB3FC60B0E010");

                    b.HasIndex(new[] { "PersonnelId" }, "NonClusteredIndex-20240927-085449");

                    b.HasIndex(new[] { "CardNum" }, "NonClusteredIndex-20241003-093352");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("asset_allocation_api.Context.TypeTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("NonReturnableAssetTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetTypeId");

                    b.HasIndex("NonReturnableAssetTypeId");

                    b.ToTable("TypeTraining", (string)null);
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntryProperty", b =>
                {
                    b.HasOne("Z.EntityFramework.Plus.AuditEntry", "Parent")
                        .WithMany("Properties")
                        .HasForeignKey("AuditEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("asset_allocation_api.Context.Asset", b =>
                {
                    b.HasOne("asset_allocation_api.Context.AssetType", "AssetType")
                        .WithMany("Assets")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_Asset_AssetType");

                    b.HasOne("asset_allocation_api.Context.Department", "Department")
                        .WithMany("Assets")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Asset_Department");

                    b.HasOne("asset_allocation_api.Context.AssetAllocation", "LastAllocation")
                        .WithMany("Assets")
                        .HasForeignKey("LastAllocationId")
                        .HasConstraintName("Asset_AssetAllocation_Id_fk");

                    b.HasOne("asset_allocation_api.Context.AssetCheckHistory", "LastMaintenance")
                        .WithMany("Assets")
                        .HasForeignKey("LastMaintenanceId")
                        .HasConstraintName("Asset_AssetCheckHistory_Id_fk");

                    b.Navigation("AssetType");

                    b.Navigation("Department");

                    b.Navigation("LastAllocation");

                    b.Navigation("LastMaintenance");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetAllocation", b =>
                {
                    b.HasOne("asset_allocation_api.Context.Asset", "Asset")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_Asset_Allocation_Asset");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetAttachment", b =>
                {
                    b.HasOne("asset_allocation_api.Context.Asset", "Asset")
                        .WithMany("AssetAttachments")
                        .HasForeignKey("AssetId")
                        .IsRequired()
                        .HasConstraintName("FK_Asset_Attachments_Asset");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckHistory", b =>
                {
                    b.HasOne("asset_allocation_api.Context.AssetCheckType", "AssetCheckType")
                        .WithMany("AssetCheckHistories")
                        .HasForeignKey("AssetCheckTypeId")
                        .HasConstraintName("FK_AssetCheckType_Asset");

                    b.HasOne("asset_allocation_api.Context.Asset", "Asset")
                        .WithMany("AssetCheckHistories")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_AssetCheckHistory_Asset");

                    b.Navigation("Asset");

                    b.Navigation("AssetCheckType");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckTypeSetting", b =>
                {
                    b.HasOne("asset_allocation_api.Context.AssetType", "AssetType")
                        .WithMany("AssetCheckTypeSettings")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_AssetCheckTypeSetting_AssetTypeId");

                    b.HasOne("asset_allocation_api.Context.AssetCheckType", "CheckType")
                        .WithMany()
                        .HasForeignKey("CheckTypeId");

                    b.Navigation("AssetType");

                    b.Navigation("CheckType");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetInspectionHistory", b =>
                {
                    b.HasOne("asset_allocation_api.Context.Asset", "Asset")
                        .WithMany("AssetInspectionHistories")
                        .HasForeignKey("AssetId")
                        .HasConstraintName("FK_AssetInspectionHistory_AssetId");

                    b.HasOne("asset_allocation_api.Context.AssetCheckType", "CheckType")
                        .WithMany("AssetInspectionHistories")
                        .HasForeignKey("CheckTypeId")
                        .HasConstraintName("FK_AssetInspectionHistory_CheckTypeId");

                    b.Navigation("Asset");

                    b.Navigation("CheckType");
                });

            modelBuilder.Entity("asset_allocation_api.Context.Configuration", b =>
                {
                    b.HasOne("asset_allocation_api.Context.Department", "Department")
                        .WithMany("Configurations")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("Configuration_Department_Id_fk");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("asset_allocation_api.Context.DepartmentAssetType", b =>
                {
                    b.HasOne("asset_allocation_api.Context.AssetType", "AssetType")
                        .WithMany("DepartmentAssetTypes")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_DepartmentAssetType_AssetType");

                    b.HasOne("asset_allocation_api.Context.Department", "Department")
                        .WithMany("DepartmentAssetTypes")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_DepartmentAssetType_Department");

                    b.Navigation("AssetType");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetAllocation", b =>
                {
                    b.HasOne("asset_allocation_api.Context.NonReturnableAssetPersonnelPermit", "Permit")
                        .WithMany("NonReturnableAssetAllocations")
                        .HasForeignKey("PermitId");

                    b.Navigation("Permit");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetField", b =>
                {
                    b.HasOne("asset_allocation_api.Context.NonReturnableAssetType", "AssetType")
                        .WithMany("NonReturnableAssetFields")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_NonReturnableAssetField_AssetType");

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetPersonnelPermit", b =>
                {
                    b.HasOne("asset_allocation_api.Context.NonReturnableAssetType", "AssetType")
                        .WithMany("NonReturnableAssetPersonnelPermits")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("FK_NonReturnableAssetPersonnelPermit_AssetType");

                    b.Navigation("AssetType");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetPersonnelSetting", b =>
                {
                    b.HasOne("asset_allocation_api.Context.NonReturnableAssetField", "Field")
                        .WithMany("NonReturnableAssetPersonnelSettings")
                        .HasForeignKey("FieldId")
                        .HasConstraintName("NonReturnableAssetPersonnelSetting_NonReturnableAssetField_Id_fk");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetType", b =>
                {
                    b.HasOne("asset_allocation_api.Context.Department", "Department")
                        .WithMany("NonReturnableAssetTypes")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("NonReturnableAssetType_Department_Id_fk");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("asset_allocation_api.Context.TypeTraining", b =>
                {
                    b.HasOne("asset_allocation_api.Context.AssetType", "AssetType")
                        .WithMany("TypeTrainings")
                        .HasForeignKey("AssetTypeId")
                        .HasConstraintName("TypeTraining_AssetType_Id_fk");

                    b.HasOne("asset_allocation_api.Context.NonReturnableAssetType", "NonReturnableAssetType")
                        .WithMany("TypeTrainings")
                        .HasForeignKey("NonReturnableAssetTypeId")
                        .HasConstraintName("TypeTraining_NonReturnableAssetType_Id_fk");

                    b.Navigation("AssetType");

                    b.Navigation("NonReturnableAssetType");
                });

            modelBuilder.Entity("Z.EntityFramework.Plus.AuditEntry", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("asset_allocation_api.Context.Asset", b =>
                {
                    b.Navigation("AssetAllocations");

                    b.Navigation("AssetAttachments");

                    b.Navigation("AssetCheckHistories");

                    b.Navigation("AssetInspectionHistories");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetAllocation", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckHistory", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetCheckType", b =>
                {
                    b.Navigation("AssetCheckHistories");

                    b.Navigation("AssetInspectionHistories");
                });

            modelBuilder.Entity("asset_allocation_api.Context.AssetType", b =>
                {
                    b.Navigation("AssetCheckTypeSettings");

                    b.Navigation("Assets");

                    b.Navigation("DepartmentAssetTypes");

                    b.Navigation("TypeTrainings");
                });

            modelBuilder.Entity("asset_allocation_api.Context.Department", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Configurations");

                    b.Navigation("DepartmentAssetTypes");

                    b.Navigation("NonReturnableAssetTypes");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetField", b =>
                {
                    b.Navigation("NonReturnableAssetPersonnelSettings");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetPersonnelPermit", b =>
                {
                    b.Navigation("NonReturnableAssetAllocations");
                });

            modelBuilder.Entity("asset_allocation_api.Context.NonReturnableAssetType", b =>
                {
                    b.Navigation("NonReturnableAssetFields");

                    b.Navigation("NonReturnableAssetPersonnelPermits");

                    b.Navigation("TypeTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
